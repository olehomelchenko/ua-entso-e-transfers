name: Daily Load and Assemble

on:
  schedule:
    - cron: '0 3 * * *'  # Runs every day at 03:00 UTC
  workflow_dispatch:  # Allows the workflow to be manually triggered

jobs:
  load-and-assemble:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'  # Specify your Python version here

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run load script for previous date
        id: run-load
        run: |
          YESTERDAY=$(date -d "yesterday" '+%Y-%m-%d')
          echo "YESTERDAY=$YESTERDAY" >> $GITHUB_OUTPUT
          echo "Running load.py for date: $YESTERDAY"
          python load.py --date "$YESTERDAY"

      - name: Run assemble script
        id: run-assemble
        run: |
          echo "Running assemble.py"
          python assemble.py

      - name: Commit and push changes
        id: commit-push
        run: |
          BRANCH_NAME="data-update-$(date +'%Y%m%d%H%M%S')"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH_NAME
          git add data/ output.json output_daily.json
          git commit -m "Update data and output.json for ${{steps.run-load.YESTERDAY}}"
          git push origin $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request
        id: create_pr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.commit-push.BRANCH_NAME }}
          title: "Daily data update for ${{steps.run-load.YESTERDAY}}"
          body: "This pull request contains the daily data update for ${{steps.run-load.YESTERDAY}}."
          base: main
          auto-merge: true

      - name: Delete branch if merge is successful
        if: steps.create_pr.outputs.merge_status == 'merged'
        run: |
          git push origin --delete ${{ steps.commit-push.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
